name: build
on: [push, pull_request]
jobs:
  build:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]  # Only Windows
        build_type: [RelWithDebInfo, Debug]
        ui: [gui, cli]
        scripting: [lua, noscripts]
        exclude:
          - build_type: Debug
            ui: gui
          - build_type: RelWithDebInfo
            ui: cli
          - build_type: RelWithDebInfo
            scripting: noscripts
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'
    - name: Install Skia
      if: ${{ matrix.ui == 'gui' }}
      shell: bash
      run: |
        choco install wget -y --no-progress
        wget https://github.com/aseprite/skia/releases/download/m102-861e4743af/Skia-Windows-Release-x64.zip
        unzip Skia-Windows-Release-x64.zip -d skia
    - name: ccache
      uses: hendrikmuhs/ccache-action@v1
      if: false  # Disable ccache since it's only relevant for Linux/macOS
    - uses: aseprite/get-ninja@main
    - uses: ilammy/msvc-dev-cmd@v1
    - name: Generating Makefiles
      shell: bash
      run: |
        export enable_ccache=off
        if [[ "${{ matrix.ui }}" == "gui" ]] ; then
          export enable_ui=on
          export laf_backend=skia
        else
          export enable_ui=off
          export laf_backend=none
        fi

        if [[ "${{ matrix.scripting }}" == "lua" ]] ; then
          export enable_scripting=on
        else
          export enable_scripting=off
        fi

        cmake -S . -B build -G Ninja \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DENABLE_TESTS=ON \
          -DENABLE_UI=$enable_ui \
          -DENABLE_SCRIPTING=$enable_scripting \
          -DENABLE_CCACHE=$enable_ccache \
          -DLAF_BACKEND=$laf_backend \
          -DSKIA_DIR=skia \
          -DSKIA_LIBRARY_DIR=skia/out/Release-x64
    - name: Compiling
      shell: bash
      run: |
        cd build && ninja
    - name: Running C++ Tests
      shell: bash
      run: |
        cd build && ctest --output-on-failure
    - name: Running CLI Tests
      if: ${{ matrix.scripting == 'lua' }}
      shell: bash
      run: |
        export ASEPRITE=$PWD/build/bin/aseprite
        cd tests
        bash run-tests.sh
